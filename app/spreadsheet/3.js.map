{
  "version": 3,
  "file": "3.js",
  "sources": [
    "/app/spreadsheet/3.tsx"
  ],
  "sourcesContent": [
    "import { makeInit } from \"../lib/init\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { LuaEngine, LuaFactory } from \"wasmoon\";\n\nconst xNames = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nconst props = [\"\", \"_fontWeight\", \"_fontFamily\", \"_bgColor\", \"_fgColor\"];\nconst cellIds: string[] = [];\nfor (let y = 1; y <= 10; y++) {\n\tfor (const x of xNames.slice(0, 10)) {\n\t\tfor (const prop of props) {\n\t\t\tcellIds.push(`${x}${y}${prop}`);\n\t\t}\n\t}\n}\nconst startCells = Object.fromEntries(cellIds.map((id) => [id, \"\"]));\nstartCells.A1 = \"1\";\nstartCells.B1 = \"2\";\nstartCells.C1 = \"A1 + B1\";\n\nstartCells.C1_fontWeight = \"F4\";\nstartCells.C1_fontFamily = \"F5\";\nstartCells.C1_bgColor = \"F6\";\nstartCells.C1_fgColor = \"F7\";\n\nstartCells.E4 = `\"Font weight:\"`;\nstartCells.E4_fontWeight = `\"bold\"`;\nstartCells.F4 = `\"bold\"`;\n\nstartCells.E5 = `\"Font family:\"`;\nstartCells.E5_fontWeight = `\"bold\"`;\nstartCells.F5 = `\"monospace\"`;\n\nstartCells.E6 = `\"BG color:\"`;\nstartCells.E6_fontWeight = `\"bold\"`;\nstartCells.F6 = `\"blue\"`;\n\nstartCells.E7 = `\"FG color:\"`;\nstartCells.E7_fontWeight = `\"bold\"`;\nstartCells.F7 = `\"white\"`;\n\nconst AsyncFunction = async function () {}.constructor;\n\nconst luaFactory = new LuaFactory();\nasync function getLua() {\n\treturn await luaFactory.createEngine({ enableProxy: false });\n}\n\nfunction useSheetNaiveAf() {\n\tconst [sheet, setSheet] = useState(startCells);\n\n\tconst cellUpdaterFactory = useCallback(\n\t\t(id: string) => {\n\t\t\treturn (v: string) => {\n\t\t\t\tsetSheet({\n\t\t\t\t\t...sheet,\n\t\t\t\t\t[id]: v,\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t[sheet],\n\t);\n\n\tconst [computedSheet, setComputedSheet] = useState(null);\n\tuseEffect(() => {\n\t\tconst computers: Record<string, () => Promise<unknown>> = {};\n\t\tconst computingComputers: Record<string, Promise<unknown>> = {};\n\t\tfor (const [it, code] of Object.entries(sheet)) {\n\t\t\tcomputers[it] = async () => {\n\t\t\t\t// is making a new lua engine every time wise? probably not.\n\t\t\t\tconst lua = await getLua();\n\t\t\t\tlua.global.set(\"_getCell\", async (id) => {\n\t\t\t\t\tif (computers[id]) {\n\t\t\t\t\t\tcomputingComputers[id] ??= computers[id]();\n\t\t\t\t\t\treturn await computingComputers[id];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tawait lua.doString(`\n\t\t\t\t\tdo\n\t\t\t\t\t\tlocal getCell = _getCell\n\t\t\t\t\t\t_getCell = nil\n\t\t\t\t\t\tsetmetatable(_G, {\n\t\t\t\t\t\t\t__index = function(_, key)\n\t\t\t\t\t\t\t\treturn getCell(key):await()\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t})\n\t\t\t\t\t\tprint(_G)\n\t\t\t\t\tend\n\t\t\t\t`);\n\t\t\t\treturn await lua.doString(`return ${code}`);\n\t\t\t};\n\t\t}\n\t\tPromise.all(\n\t\t\tObject.entries(computers).map(async ([id, computer]) => [id, await (computingComputers[id] ??= computer())]),\n\t\t).then((values) => {\n\t\t\tconst coolSheet = Object.fromEntries(values);\n\t\t\tsetComputedSheet(coolSheet);\n\t\t\tconsole.log(\"we computed this:\", coolSheet);\n\t\t});\n\t}, [sheet]);\n\n\treturn {\n\t\tsheet,\n\t\tcomputedSheet,\n\t\tcellUpdaterFactory,\n\t};\n}\n\ninterface CellProps {\n\tid: string;\n\tsheet: Record<string, string>;\n\tcomputedSheet?: Record<string, unknown>;\n\tsetValue: (v: string) => void;\n\tsetCurrentCell: (id: string) => void;\n}\nfunction Cell({ id, sheet, computedSheet, setValue, setCurrentCell }: CellProps) {\n\tconst value = sheet[id];\n\tlet computedValue;\n\tif (!computedSheet) {\n\t\tcomputedValue = \"...\";\n\t} else {\n\t\tconst cv = computedSheet[id];\n\t\tif (cv === undefined) {\n\t\t\tcomputedValue = \"\";\n\t\t} else if (cv !== cv) {\n\t\t\tcomputedValue = \"NaN\";\n\t\t} else if (typeof cv === \"string\") {\n\t\t\tcomputedValue = cv;\n\t\t} else {\n\t\t\tcomputedValue = JSON.stringify(computedSheet[id]);\n\t\t}\n\t}\n\tconst propIds = props.map((prop) => `${id}${prop}`);\n\tconst [_unneeded, fontWeight, fontFamily, bgColor, fgColor] = propIds.map((propId) => computedSheet?.[propId]);\n\n\t// const inputRef = useRef<HTMLInputElement>(null);\n\tconst [hasFocus, setHasFocus] = useState(false);\n\n\tconst valueToShow = hasFocus ? value : computedValue;\n\n\treturn (\n\t\t<input\n\t\t\tid={id}\n\t\t\ttitle={id}\n\t\t\tclassName={\"cell\" + (hasFocus ? \" has-focus\" : \"\")}\n\t\t\tonKeyUp={(e) => {\n\t\t\t\tif (e.key === \"Enter\") {\n\t\t\t\t\tconst cellBelow = id[0] + (parseInt(id.slice(1)) + 1);\n\t\t\t\t\tconst cellAbove = id[0] + (parseInt(id.slice(1)) - 1);\n\t\t\t\t\tconst cell = e.shiftKey ? cellAbove : cellBelow;\n\t\t\t\t\t// this is not react-like at all lol\n\t\t\t\t\tdocument.querySelector(`#${cell}`)?.focus();\n\t\t\t\t}\n\t\t\t}}\n\t\t\tonChange={(e) => {\n\t\t\t\tsetValue(e.target.value);\n\t\t\t}}\n\t\t\tvalue={valueToShow}\n\t\t\tonFocus={() => {\n\t\t\t\tsetHasFocus(true);\n\t\t\t\tsetCurrentCell(id);\n\t\t\t}}\n\t\t\tonBlur={() => setHasFocus(false)}\n\t\t\tstyle={{\n\t\t\t\tfontWeight: fontWeight as string,\n\t\t\t\tfontFamily: fontFamily as string,\n\t\t\t\tbackgroundColor: bgColor as string,\n\t\t\t\tcolor: fgColor as string,\n\t\t\t}}\n\t\t/>\n\t);\n}\n\nfunction CellConfig({ id, sheet, cellUpdaterFactory }) {\n\tconst propIds = props.map((prop) => `${id}${prop}`);\n\n\tconst propConfs = [];\n\tfor (const propId of propIds) {\n\t\tconst value = sheet[propId];\n\t\tconst setValue = useCallback(cellUpdaterFactory(propId), [propId, sheet]);\n\t\tconst el = (\n\t\t\t<div className=\"prop\" key={propId}>\n\t\t\t\t<label htmlFor={propId}>{propId}</label>\n\t\t\t\t<input id={propId} value={value} onChange={(e) => setValue(e.target.value)} />\n\t\t\t</div>\n\t\t);\n\t\tpropConfs.push(el);\n\t}\n\n\treturn <div className=\"cell-config\">{propConfs}</div>;\n}\n\nfunction Spreadsheet() {\n\tconst { sheet, computedSheet, cellUpdaterFactory } = useSheetNaiveAf();\n\tconst [currentCell, setCurrentCell] = useState(\"A1\");\n\tconst cellNodes = cellIds\n\t\t.filter((id) => !id.includes(\"_\"))\n\t\t.map((id) => (\n\t\t\t<Cell\n\t\t\t\tid={id}\n\t\t\t\tkey={id}\n\t\t\t\tsheet={sheet}\n\t\t\t\tcomputedSheet={computedSheet}\n\t\t\t\tsetValue={useCallback(cellUpdaterFactory(id), [id, sheet])}\n\t\t\t\tsetCurrentCell={setCurrentCell}\n\t\t\t/>\n\t\t));\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"spreadsheet\">{cellNodes}</div>\n\t\t\t<CellConfig id={currentCell} sheet={sheet} cellUpdaterFactory={cellUpdaterFactory} />\n\t\t</div>\n\t);\n}\n\nexport default makeInit(Spreadsheet);\n"
  ],
  "names": [
    "LuaFactory",
    "useState",
    "useCallback",
    "useEffect",
    "jsx",
    "jsxs"
  ],
  "mappings": "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"
}